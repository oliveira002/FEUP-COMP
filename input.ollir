import io;
import Quicksort;

CompileBasic extends Quicksort {
	.field intField.i32;
	.field boolField.bool;
	.field boas.array.i32;
	.field boas2.String;
	.field boas3.CompileBasic;

	.construct CompileBasic().V {
		invokespecial(this, "<init>").V;
	}

	.method public method1().i32 {
		temp0.i32 :=.i32 2.i32 *.i32 3.i32;
		temp1.i32 :=.i32 1.i32 +.i32 temp0.i32;
		intLocal1.i32 :=.i32 temp1.i32 +.i32 4.i32;
        boolLocal1.bool :=.bool 1.bool;
		ret.i32 0.i32;
	}

	.method public method2(intParam1.i32, boolParam1.bool).bool {

	    //putfield(this, intField.i32, 5.i32).V;
        //putfield(this, boolField.bool, 0.bool).V;

        //temp2.bool :=.bool getfield(this, boolField.bool).bool;
		ret.bool boolParam1.bool;
	}

	.method public method3().i32 {
		a.i32 :=.i32 1.i32;
		b.i32 :=.i32 2.i32;
		c.i32 :=.i32 a.i32;

        invokestatic(io,"println",c.i32).V;

        //temp3.CompileBasic :=.CompileBasic new(CompileBasic).CompileBasic;
        //invokespecial(temp3.CompileBasic,"<init>").V;
        //temp4.i32 :=.i32 invokevirtual(temp2.CompileBasic,"method1").i32;
        //invokestatic(io, "println", temp4.i32).V;


		temp5.i32 :=.i32 a.i32 +.i32 b.i32;
		ret.i32 temp5.i32;
	}

	.method public method4().i32 {
		d.i32 :=.i32 2.i32;
		e.i32 :=.i32 2.i32;
		f.i32 :=.i32 2.i32;

		temp6.i32 :=.i32 1.i32 +.i32 2.i32;
		temp7.i32 :=.i32 temp6.i32 +.i32 3.i32;
		intLocal2.array.i32 :=.array.i32 new(array, temp6.i32).array.i32;

		temp8.i32 :=.i32 0.i32;
		intLocal2[temp8.i32].i32 :=.i32 1.i32;

		temp9.i32 :=.i32 0.i32 +.i32 1.i32;
		temp10.i32 :=.i32 d.i32 +.i32 e.i32;
		intLocal2[temp9.i32].i32 :=.i32 temp10i32;

		intLocal2[f.i32].i32 :=.i32 3.i32;

		ret.i32 0.i32;
	}

	.method public static main(args.array.String).V {
		test.CompileBasic :=.CompileBasic new(CompileBasic).CompileBasic;
		invokespecial(test.CompileBasic,"<init>").V;
        invokevirtual(test.CompileBasic,"method4",10.i32).V;

		ret.V;
	}
}